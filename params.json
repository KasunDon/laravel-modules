{"name":"Laravel Modules","tagline":"Application specific modules in Laravel 4","body":"# Modules in Laravel 4\r\n\r\nApplication specific modules in Laravel 4 can be enabled by adding the following to your **\"composer.json\"** file:\r\n\r\n    \"creolab/laravel-modules\": \"dev-master\"\r\n\r\nAnd by adding a new provider to your providers list in **\"app/config/app.php\"**:\r\n\r\n    'Creolab\\LaravelModules\\ServiceProvider',\r\n\r\nAlso you need to add your modules directory to the composer autoloader:\r\n\r\n    \"autoload\": {\r\n        \"classmap\": [\r\n            \"app/modules\"\r\n        ]\r\n    }\r\n\r\nThis also means you need to run **\"composer dump\"** every time you add a new class to your module.\r\n\r\nBy default you can add a **\"modules\"** directory in your **\"app\"** directory. So as an example this is a structure for one of my projects:\r\n\r\n    app/\r\n    |-- modules\r\n        |-- auth\r\n            |-- controllers\r\n            |-- models\r\n            |-- views\r\n            |-- module.json\r\n        |-- content\r\n            |-- controllers\r\n            |-- models\r\n            |-- views\r\n            |-- module.json\r\n        |-- shop\r\n            |-- module.json\r\n        |-- system\r\n            |-- module.json\r\n\r\nNote that every module has a **\"module.json\"** file, in which you can enable/disable the module. I plan on adding more meta data to these module definitions, but I need feedback as to what to put in there.\r\nThe first thing will probably be some kind of a bootstrap class.\r\n\r\nIf you want to have your modules in more that 1 directories you need to change the packages config file as following:\r\n\r\n    'path' => array(\r\n        'app/modules',\r\n        'public/site',\r\n        'another/folder/containing/modules',\r\n    ),\r\n\r\nAnd don't forget to add those directories to your autoload list inside the composer.json file.\r\n\r\nOne of the available option is the order in which the modules are loaded. This can be done simply by adding the following to your modules.json file:\r\n\r\n    \"order\": 5\r\n\r\nThe order defaults to 0, so keep that in mind if you don't define it.\r\n\r\nFor now take a look at the example implementation, and please provide feedback ;)\r\n\r\n[https://github.com/bstrahija/laravel-modules-example](https://github.com/bstrahija/laravel-modules-example)\r\n\r\n# Commands\r\n\r\nThere are 2 commands available through this package:\r\n\r\n    php artisan modules\r\n\r\nWhich simply diplays all current modules depending on the mode set in the configuration. And:\r\n\r\n    php artisan modules:scan\r\n\r\nWhich is only required if you have your modules setup in the **\"manifest\"** mode (see below).\r\nThis command scans the modules exactly like in the **\"auto\"** mode, but caches the results into a manifest file.\r\n\r\n# Optimization\r\n\r\nBy default the package scans the **\"modules\"** directory for **\"modules.json\"** files. This is not the best solution way to discover modules, and I do plan to implement some kind of a caching to the Finder class.\r\nTo optimize the modules Finder even more you can publish the package configuration, and add the modules and definitions directly inside the configuration file by running:\r\n\r\n    php artisan config:publish creolab/laravel-modules\r\n\r\nAnd the editing the file **\"app/config/packages/creolab/laravel-modules/config.php\"**.\r\nYou just need to change the **\"mode\"** parameter from **\"auto\"** to **\"manual\"**, and list your modules under the **\"modules\"** key. An example of that is already provided inside the configuration.\r\n\r\nYou can also add multiple module paths as an array, but do note that if a module has the same name, there will be problems.\r\n\r\n## Including files\r\n\r\nYou can also specify which files in the module will be automatically included. Simply add a list of files inside your **modules.json** config:\r\n\r\n    {\r\n        \"include\": [\r\n            \"breadcrumbs.php\"\r\n        ]\r\n    }\r\n\r\nThere are some defaults set on which files will be included if they exist. Take a look at the latest config file, and republish the configuration if needed. By default these files will be included:\r\n\r\n    'include' => array(\r\n        'helpers.php',\r\n        'filters.php',\r\n        'composers.php',\r\n        'routes.php',\r\n        'bindings.php',\r\n        'observers.php',\r\n    )\r\n\r\nSo you have the choice to either add your custom files to the global configuration, which will look for these files in every module, or you can set it up on a per module basis by adding it to the **module.json** file.\r\n\r\n## Service providers\r\n\r\nA new addition is registering service providers for each module. Just add a line to your **module.json** file that looks something like this:\r\n\r\n    \"provider\": \"App\\\\Modules\\\\Content\\\\ServiceProvider\"\r\n\r\nThese service provider classes work exactly like any other service provider added to your **app/config/app.php** configuration, so setup these classes by extending the **\\Illuminate\\Support\\ServiceProvider** class and adding the appropriate methods.\r\n\r\nYou can also register multiple providers for every module by simply providing an array:\r\n\r\n    \"provider\": [\r\n        \"App\\\\Modules\\\\Content\\\\ServiceProvider\",\r\n        \"App\\\\Modules\\\\Content\\\\AnotherServiceProvider\"\r\n    ]\r\n\r\nKeep in mind that you may have to run **composer dump** so you want get error on missing classes.\r\n\r\n## Modules Manifest\r\n\r\nAnother possible mode is **\"manifest\"** which basically writes a JSON manifest file in your Laravel storage directory that contains all the modules definitions.\r\nThis is only done the first time and to update the manifest file you need to either delete it, or rescan the modules via the following command:\r\n\r\n    php artisan modules:scan\r\n\r\n# Assets\r\n\r\nJust recently the ability to publish public assets for each module has been added. Just run:\r\n\r\n    php artisan modules:publish\r\n\r\nAnd all modules that contain an **\"assets\"** directory will be published to the Laravel public directory.\r\nYou can also publish assets for individual modules by providing the module name:\r\n\r\n    php artisan modules:publish content\r\n\r\n# Migrations\r\n\r\nEvery module can have it's own migrations, and they need to be in the module/migrations directory. So for example if you want to create a migration that creates a user table for the auth module:\r\n\r\n    php artisan migrate:make create_users_table --path=app/modules/auth/migrations --table=users --create\r\n\r\nAnd to run all module migrations do this:\r\n\r\n    php artisan modules:migrate\r\n\r\nOr to run migrations for a specific module:\r\n\r\n    php artisan modules:migrate auth\r\n\r\nYou can also seed the database form the module if your **module.json** contains a seeder setting. Just pass the **--seed** option to the command:\r\n\r\n    php artisan modules:migrate --seed\r\n\r\n# Seeding\r\n\r\nThe modules can also have seeders. Just create the class like you would create a normal seeder, place it somewhere inside your module, and be sure to run **composer dump**. Then add the following to your **module.json** file:\r\n\r\n    \"seeder\": \"App\\\\Modules\\\\Content\\\\Seeds\\\\DatabaseSeeder\"\r\n\r\nThis setting should contain the namespace path to your seeder class. Now simply run:\r\n\r\n    php artisan modules:seed\r\n\r\nTo seed all your modules. Or you can do it for a specific module:\r\n\r\n    php artisan modules::seed content\r\n\r\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/creolab/laravel-modules/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}